---
export interface SubImage { src: string; alt?: string; detail?: string }
export interface ImageData { src: string; alt: string; detail: string; gallery?: SubImage[] }
export interface Props { images: ImageData[]; title: string }
const { images, title } = Astro.props;
---

<section class="bg-black py-12 sm:py-16 text-white" data-carousel-root>
  <div class="mx-auto max-w-6xl px-4">
    <h2 class="text-4xl md:text-5xl font-light tracking-tight leading-tight">{title}</h2>

    <div class="mt-6 grid grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-3 sm:gap-6">
      {images.map((img, i) => (
        <button
          data-role="open"
          data-index={i}
          aria-label={`Open: ${img.alt}`}
          class="group relative overflow-hidden rounded-xl bg-neutral-900/30 ring-1 ring-white/10 transition hover:scale-[1.01] focus:outline-none focus:ring-2 focus:ring-white/60"
        >
          <img
            src={img.src}
            alt={img.alt}
            loading="lazy"
            decoding="async"
            class="h-56 w-full object-cover sm:h-64 md:h-72"
          />
          <div class="absolute inset-0 opacity-0 transition group-hover:opacity-100 bg-black/30" />
          {img.gallery?.length ? (
            <span class="absolute bottom-2 right-2 rounded-md bg-black/70 px-2 py-1 text-xs">+{img.gallery.length}</span>
          ) : null}
        </button>
      ))}
    </div>
  </div>

  <div data-role="modal" class="fixed inset-0 z-50 hidden bg-black/70 backdrop-blur-sm" aria-hidden="true">
    <button data-role="overlay" class="absolute inset-0" aria-label="Close modal"></button>

    <button
      data-role="close"
      class="absolute right-4 top-4 z-50 grid h-8 w-8 place-items-center rounded-full bg-white/90 text-sm font-bold text-black shadow hover:bg-white hover:text-neutral-700"
      aria-label="Close modal"
    >x</button>

    <div
      class="relative mx-auto my-6 w-[92vw] max-w-5xl animate-[fadeIn_.2s_ease-out_forwards] overflow-hidden rounded-2xl bg-white text-black shadow-xl sm:my-10 sm:w-[90vw]"
      role="dialog"
      aria-modal="true"
      aria-labelledby="modalTitle"
    >
      <div class="relative bg-black">
        <img data-role="image" src="" alt="" class="block max-h-[60vh] w-full object-contain sm:max-h-[70vh]" />
        <button
          data-role="prev"
          class="absolute left-2 top-1/2 grid h-10 w-10 -translate-y-1/2 place-items-center rounded-full bg-white/80 shadow hover:bg-white focus:outline-none focus:ring-2 focus:ring-black/50"
          aria-label="Previous image"
        >‹</button>
        <button
          data-role="next"
          class="absolute right-2 top-1/2 grid h-10 w-10 -translate-y-1/2 place-items-center rounded-full bg-white/80 shadow hover:bg-white focus:outline-none focus:ring-2 focus:ring-black/50"
          aria-label="Next image"
        >›</button>
        <div data-role="progress" class="absolute left-2 top-2 rounded-md bg-white/80 px-2 py-1 text-xs text-black"></div>
      </div>

      <div class="border-b bg-white px-4 py-3">
        <div data-role="thumbs" class="flex gap-2 overflow-x-auto"></div>
      </div>

      <div class="max-h-[40vh] overflow-y-auto p-5 sm:max-h-[35vh] sm:p-6">
        <h3 data-role="title" class="mb-2 text-base font-semibold sm:text-lg"></h3>
        <div data-role="content" class="prose prose-sm max-w-none"></div>
      </div>
    </div>
  </div>

  <script type="application/json" data-role="data" set:html={JSON.stringify(images)} />

  <style is:global>
    @keyframes fadeIn { from { opacity: 0; transform: translateY(8px) } to { opacity: 1; transform: translateY(0) } }
  </style>

  <script is:inline>
    const $ = (r, s) => r.querySelector(s);
    const $$ = (r, s) => r.querySelectorAll(s);
    const clamp = (i, n) => (n ? (i + n) % n : 0);
    const isHTML = (s) => !!s && /<[a-z][\s\S]*>/i.test(s);

    (function boot() {
      $$ (document, "[data-carousel-root]").forEach(init);
    })();

    function init(root) {
      if (root.dataset.ready === "1") return;
      root.dataset.ready = "1";

      const dataEl = $(root, '[data-role="data"]');
      const modal = $(root, '[data-role="modal"]');
      const overlay = $(root, '[data-role="overlay"]');
      const closeBtn = $(root, '[data-role="close"]');
      const modalImg = $(root, '[data-role="image"]');
      const titleEl = $(root, '[data-role="title"]');
      const contentEl = $(root, '[data-role="content"]');
      const progressEl = $(root, '[data-role="progress"]');
      const thumbsEl = $(root, '[data-role="thumbs"]');

      if (!dataEl || !modal || !overlay || !closeBtn || !modalImg || !titleEl || !contentEl || !progressEl || !thumbsEl) return;

      const projects = dataEl.textContent ? JSON.parse(dataEl.textContent) : [];
      let currentProject = 0, slides = [], currentSlide = 0, lastFocused = null;

      function buildSlides(p) {
        const main = { src: p.src, alt: p.alt, detail: p.detail };
        const extras = (p.gallery || []).map(g => ({ src: g.src, alt: g.alt || p.alt, detail: g.detail || p.detail }));
        return [main, ...extras];
      }

      function lockScroll(on) {
        document.documentElement.style.overflow = on ? "hidden" : "";
        document.body.style.overflow = on ? "hidden" : "";
      }

      function setContent(s) {
        if (isHTML(s?.detail)) contentEl.innerHTML = s.detail || "";
        else contentEl.textContent = s?.detail || "";
      }

      function updateProgress() {
        progressEl.textContent = slides.length > 1 ? `${currentSlide + 1} / ${slides.length}` : "";
      }

      function preloadNeighbors(i) {
        [clamp(i - 1, slides.length), clamp(i + 1, slides.length)].forEach(k => {
          const s = slides[k];
          if (s?.src) { const img = new Image(); img.src = s.src; }
        });
      }

      function renderThumbs() {
        thumbsEl.innerHTML = "";
        slides.forEach((s, i) => {
          const b = document.createElement("button");
          b.type = "button";
          b.className = "relative shrink-0 overflow-hidden rounded-lg border border-black/10 focus:outline-none focus:ring-2 focus:ring-black/40";
          b.setAttribute("aria-label", `Go to slide ${i + 1}`);
          const im = document.createElement("img");
          im.src = s.src; im.alt = s.alt || `Slide ${i + 1}`; im.loading = "lazy";
          im.className = "h-16 w-24 object-cover";
          const hi = document.createElement("div");
          hi.className = i === currentSlide ? "absolute inset-0 ring-2 ring-black rounded-lg" : "absolute inset-0";
          b.append(im, hi);
          b.addEventListener("click", () => show(i));
          thumbsEl.appendChild(b);
        });
      }

      function show(index) {
        const i = clamp(index, slides.length);
        const s = slides[i]; if (!s) return;
        currentSlide = i;

        modalImg.style.opacity = "0";
        requestAnimationFrame(() => {
          modalImg.src = s.src;
          modalImg.alt = s.alt || "";
          const p = projects[currentProject];
          titleEl.textContent = (p && p.alt) || s.alt || `Image ${currentSlide + 1}`;
          setContent(s);
          const onLoad = () => { modalImg.style.transition = "opacity 150ms ease-out"; modalImg.style.opacity = "1"; modalImg.removeEventListener("load", onLoad); };
          modalImg.addEventListener("load", onLoad);
        });

        renderThumbs();
        updateProgress();
        preloadNeighbors(currentSlide);
      }

      function open(projectIndex) {
        currentProject = projectIndex;
        slides = buildSlides(projects[currentProject]);
        currentSlide = 0;
        modal.classList.remove("hidden");
        modal.setAttribute("aria-hidden", "false");
        lockScroll(true);
        lastFocused = document.activeElement;
        closeBtn.focus();
        show(0);
      }

      function close() {
        modal.classList.add("hidden");
        modal.setAttribute("aria-hidden", "true");
        lockScroll(false);
        if (lastFocused && lastFocused.focus) lastFocused.focus();
      }

      root.addEventListener("click", (e) => {
        const target = e.target;
        const opener = target.closest?.('[data-role="open"]');
        if (opener) {
          const idx = Number(opener.getAttribute("data-index") || "0");
          open(idx);
          return;
        }
        if (target.closest?.('[data-role="overlay"]') || target.closest?.('[data-role="close"]')) {
          close();
          return;
        }
        if (target.closest?.('[data-role="next"]')) { show(currentSlide + 1); return; }
        if (target.closest?.('[data-role="prev"]')) { show(currentSlide - 1); return; }
        if (target === modalImg) { show(currentSlide + 1); return; }
      });

      window.addEventListener("keydown", (e) => {
        if (modal.classList.contains("hidden")) return;
        if (e.key === "Escape") close();
        if (e.key === "ArrowRight") show(currentSlide + 1);
        if (e.key === "ArrowLeft") show(currentSlide - 1);
      });

      let sx = 0, sy = 0, touching = false;
      modalImg.addEventListener("touchstart", (e) => { const t = e.touches[0]; touching = true; sx = t.clientX; sy = t.clientY; }, { passive: true });
      modalImg.addEventListener("touchend", (e) => {
        if (!touching) return; touching = false;
        const t = e.changedTouches[0], dx = t.clientX - sx, dy = t.clientY - sy;
        if (Math.abs(dx) > 40 && Math.abs(dx) > Math.abs(dy)) dx < 0 ? show(currentSlide + 1) : show(currentSlide - 1);
      });
    }
  </script>
</section>
