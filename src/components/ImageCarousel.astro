---
/**
 * ImageCarousel.astro (all-in-one)
 * - Grid of project cards
 * - Modal per project with its own carousel (main + gallery)
 * - No external scripts; everything inline (no MIME problems)
 */

export interface SubImage {
  src: string;
  alt?: string;
  detail?: string; // HTML or plain text
}
export interface ImageData {
  src: string;
  alt: string;
  detail: string; // HTML or plain text
  gallery?: SubImage[]; // extra images for this project
}
export interface Props {
  images: ImageData[];
  title: string;
}

const { images, title } = Astro.props;
---

<section class="bg-black py-12 sm:py-16 text-white" data-carousel-root>
  <div class="max-w-6xl mx-auto px-4">
    <h2 class="text-4xl md:text-5xl font-light tracking-tight leading-tight">
      {title}
    </h2>

    <!-- Projects grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 sm:gap-6">
      {
        images.map((img, i) => (
          <button
            class="group relative overflow-hidden rounded-xl shadow focus:outline-none focus:ring-2 focus:ring-white/60 active:scale-[0.99] transition-transform"
            data-role="open"
            data-index={i}
            aria-label={`Open: ${img.alt}`}
          >
            <img
              src={img.src}
              alt={img.alt}
              loading="lazy"
              class="w-full aspect-[4/3] object-cover"
            />
            <div class="absolute inset-0 bg-black/30 opacity-0 group-hover:opacity-100 transition" />
            {img.gallery?.length ? (
              <span class="absolute bottom-2 right-2 text-xs bg-black/70 px-2 py-1 rounded-md">
                +{img.gallery.length}
              </span>
            ) : null}
          </button>
        ))
      }
    </div>
  </div>

  <!-- Modal (scoped via data-role) -->
  <div
    data-role="modal"
    class="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 hidden"
    aria-hidden="true"
  >
    <button
      data-role="overlay"
      class="absolute inset-0"
      aria-label="Close modal"></button>

    <div
      class="relative mx-auto my-6 sm:my-10 w-[92vw] sm:w-[90vw] max-w-5xl bg-white text-black rounded-2xl shadow-xl overflow-hidden animate-fadeIn"
      role="dialog"
      aria-modal="true"
      aria-labelledby="modalTitle"
    >
      <button
        data-role="close"
        class="absolute top-3 right-3 h-10 w-10 grid place-items-center rounded-full text-2xl text-gray-600 hover:text-gray-800 hover:bg-gray-100"
        aria-label="Close modal">&times;</button
      >

      <div class="relative bg-black">
        <img
          data-role="image"
          src=""
          alt=""
          class="w-full max-h-[60vh] sm:max-h-[70vh] object-contain"
        />
        <button
          data-role="prev"
          class="absolute left-2 top-1/2 -translate-y-1/2 h-10 w-10 grid place-items-center rounded-full bg-white/80 hover:bg-white shadow focus:outline-none focus:ring-2 focus:ring-black/50"
          aria-label="Previous image">‹</button
        >
        <button
          data-role="next"
          class="absolute right-2 top-1/2 -translate-y-1/2 h-10 w-10 grid place-items-center rounded-full bg-white/80 hover:bg-white shadow focus:outline-none focus:ring-2 focus:ring-black/50"
          aria-label="Next image">›</button
        >
        <div
          data-role="progress"
          class="absolute left-2 top-2 text-xs bg-white/80 text-black px-2 py-1 rounded-md"
        >
        </div>
      </div>

      <div class="px-4 py-3 bg-white border-b">
        <div data-role="thumbs" class="flex gap-2 overflow-x-auto"></div>
      </div>

      <div class="p-5 sm:p-6 max-h-[40vh] sm:max-h-[35vh] overflow-y-auto">
        <h3 data-role="title" class="text-base sm:text-lg font-semibold mb-2">
        </h3>
        <div data-role="content" class="prose prose-sm max-w-none"></div>
      </div>
    </div>
  </div>

  <!-- Per-instance data -->
  <script
    type="application/json"
    data-role="data"
    set:html={JSON.stringify(images)}
  />

  <style is:global>
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(12px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    .animate-fadeIn {
      animation: fadeIn 0.25s ease-out forwards;
    }
  </style>

  <!-- Inline JS: no external requests, no MIME issues -->
  <script is:inline>
    // Helpers (plain JS)
    const $$ = (root, sel) => root.querySelectorAll(sel);
    const $ = (root, sel) => root.querySelector(sel);
    const hasHTML = (s) => !!s && /<[a-z][\s\S]*>/i.test(s);
    const clamp = (i, len) => (len ? (i + len) % len : 0);

    // Initialize every carousel instance on the page (safe if 1)
    (function initAll() {
      const hosts = document.querySelectorAll("[data-carousel-root]");
      hosts.forEach((host) => initCarousel(host));
    })();

    function initCarousel(root) {
      // Guard: prevent double-binding
      if (root.dataset.carouselReady === "1") return;
      root.dataset.carouselReady = "1";

      // Scoped lookups
      const dataEl = /** @type {HTMLScriptElement|null} */ (
        $(root, '[data-role="data"]')
      );

      const modal = /** @type {HTMLDivElement|null} */ (
        $(root, '[data-role="modal"]')
      );
      const overlay = /** @type {HTMLButtonElement|null} */ (
        $(root, '[data-role="overlay"]')
      );
      const closeBtn = /** @type {HTMLButtonElement|null} */ (
        $(root, '[data-role="close"]')
      );

      const modalImg = /** @type {HTMLImageElement|null} */ (
        $(root, '[data-role="image"]')
      );
      const modalTitle = /** @type {HTMLHeadingElement|null} */ (
        $(root, '[data-role="title"]')
      );
      const modalContent = /** @type {HTMLDivElement|null} */ (
        $(root, '[data-role="content"]')
      );
      const progress = /** @type {HTMLDivElement|null} */ (
        $(root, '[data-role="progress"]')
      );

      const prevBtn = /** @type {HTMLButtonElement|null} */ (
        $(root, '[data-role="prev"]')
      );
      const nextBtn = /** @type {HTMLButtonElement|null} */ (
        $(root, '[data-role="next"]')
      );
      const thumbs = /** @type {HTMLDivElement|null} */ (
        $(root, '[data-role="thumbs"]')
      );

      const openers = /** @type {NodeListOf<HTMLButtonElement>} */ (
        $$(root, '[data-role="open"]')
      );

      if (
        !dataEl ||
        !modal ||
        !overlay ||
        !closeBtn ||
        !modalImg ||
        !modalTitle ||
        !modalContent ||
        !prevBtn ||
        !nextBtn ||
        !thumbs
      ) {
        return; // essential nodes missing
      }

      // State (per instance)
      let projects = [];
      let currentProject = 0;
      let slides = [];
      let currentSlide = 0;
      let lastFocused = null;

      // Data
      projects = dataEl.textContent ? JSON.parse(dataEl.textContent) : [];

      // Helpers
      const lockScroll = (on) => {
        document.documentElement.style.overflow = on ? "hidden" : "";
        document.body.style.overflow = on ? "hidden" : "";
      };

      const buildSlides = (p) => {
        const main = { src: p.src, alt: p.alt, detail: p.detail };
        const extras = (p.gallery ?? []).map((g) => ({
          src: g.src,
          alt: g.alt ?? p.alt,
          detail: g.detail ?? p.detail,
        }));
        return [main, ...extras];
      };

      const preloadNeighbors = (i) => {
        [clamp(i - 1, slides.length), clamp(i + 1, slides.length)].forEach(
          (k) => {
            const s = slides[k];
            if (s && s.src) {
              const img = new Image();
              img.src = s.src;
            }
          }
        );
      };

      const updateProgress = () => {
        progress.textContent =
          slides.length > 1 ? `${currentSlide + 1} / ${slides.length}` : "";
      };

      const renderThumbs = () => {
        thumbs.innerHTML = "";
        slides.forEach((s, i) => {
          const btn = document.createElement("button");
          btn.type = "button";
          btn.className =
            "shrink-0 relative rounded-lg overflow-hidden border border-black/10 focus:outline-none focus:ring-2 focus:ring-black/40";
          btn.setAttribute("aria-label", `Go to slide ${i + 1}`);

          const im = document.createElement("img");
          im.src = s.src;
          im.alt = s.alt || `Slide ${i + 1}`;
          im.loading = "lazy";
          im.className = "h-16 w-24 object-cover";

          const hi = document.createElement("div");
          hi.className =
            i === currentSlide
              ? "absolute inset-0 ring-2 ring-black rounded-lg"
              : "absolute inset-0";

          btn.appendChild(im);
          btn.appendChild(hi);
          btn.addEventListener("click", () => showSlide(i));
          thumbs.appendChild(btn);
        });
      };

      const showSlide = (index) => {
        const safe = clamp(index, slides.length);
        const s = slides[safe];
        if (!s) return;
        currentSlide = safe;

        // Crossfade
        modalImg.style.opacity = "0";
        requestAnimationFrame(() => {
          modalImg.src = s.src;
          modalImg.alt = s.alt || "";
          const p = projects[currentProject];
          modalTitle.textContent =
            (p && p.alt) || s.alt || `Image ${currentSlide + 1}`;
          if (hasHTML(s.detail)) {
            modalContent.innerHTML = s.detail || "";
          } else {
            modalContent.textContent = s.detail || "";
          }
          const onLoad = () => {
            modalImg.style.transition = "opacity 150ms ease-out";
            modalImg.style.opacity = "1";
            modalImg.removeEventListener("load", onLoad);
          };
          modalImg.addEventListener("load", onLoad);
        });

        renderThumbs();
        updateProgress();
        preloadNeighbors(currentSlide);
      };

      const openProject = (projectIndex) => {
        currentProject = projectIndex;
        slides = buildSlides(projects[currentProject]);
        currentSlide = 0;

        modal.classList.remove("hidden");
        modal.setAttribute("aria-hidden", "false");
        lockScroll(true);
        lastFocused = document.activeElement || null;
        if (closeBtn) closeBtn.focus();

        showSlide(0);
      };

      const closeModal = () => {
        modal.classList.add("hidden");
        modal.setAttribute("aria-hidden", "true");
        lockScroll(false);
        if (lastFocused && typeof lastFocused.focus === "function")
          lastFocused.focus();
      };

      const next = () => showSlide(currentSlide + 1);
      const prev = () => showSlide(currentSlide - 1);

      // Openers
      openers.forEach((el) => {
        el.addEventListener("click", () => {
          const raw = el.getAttribute("data-index");
          openProject(Number(raw ?? 0));
        });
      });

      // Controls
      overlay.addEventListener("click", closeModal);
      closeBtn.addEventListener("click", closeModal);
      nextBtn.addEventListener("click", next);
      prevBtn.addEventListener("click", prev);
      modalImg.addEventListener("click", next);

      // Keyboard (while modal open)
      window.addEventListener("keydown", (e) => {
        if (modal.classList.contains("hidden")) return;
        if (e.key === "Escape") closeModal();
        if (e.key === "ArrowRight") next();
        if (e.key === "ArrowLeft") prev();
      });

      // Swipe
      let startX = 0,
        startY = 0,
        touching = false;
      modalImg.addEventListener(
        "touchstart",
        (e) => {
          const t = e.touches[0];
          touching = true;
          startX = t.clientX;
          startY = t.clientY;
        },
        { passive: true }
      );
      modalImg.addEventListener("touchend", (e) => {
        if (!touching) return;
        touching = false;
        const t = e.changedTouches[0];
        const dx = t.clientX - startX;
        const dy = t.clientY - startY;
        if (Math.abs(dx) > 40 && Math.abs(dx) > Math.abs(dy)) {
          dx < 0 ? next() : prev();
        }
      });
    }
  </script>
</section>
