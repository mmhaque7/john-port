---
export interface ImageData {
  src: string;
  alt: string;
  detail: string; // HTML or plain text
}

export interface Props {
  images: ImageData[];
  title: string;
}

const { images, title } = Astro.props;
---

<section class="bg-black py-12 sm:py-16 text-white">
  <div class="max-w-6xl mx-auto px-4">
    <h2 class="text-2xl sm:text-3xl font-bold mb-6 sm:mb-10 text-center">{title}</h2>

    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 sm:gap-6">
      {
        images.map((img, i) => (
          <button
            class="group relative overflow-hidden rounded-xl shadow focus:outline-none focus:ring-2 focus:ring-white/60 active:scale-[0.99] transition-transform"
            data-index={i}
            aria-label={`Open: ${img.alt}`}
          >
            <img
              src={img.src}
              alt={img.alt}
              loading="lazy"
              class="w-full aspect-[4/3] object-cover"
            />
            <div class="absolute inset-0 bg-black/30 opacity-0 group-hover:opacity-100 transition" />
          </button>
        ))
      }
    </div>
  </div>

  <!-- Modal -->
  <div
    id="modal"
    class="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 hidden"
    aria-hidden="true"
  >
    <button id="overlay" class="absolute inset-0" aria-label="Close modal"></button>

    <div
      class="relative mx-auto my-6 sm:my-10 w-[92vw] sm:w-[90vw] max-w-3xl bg-white text-black rounded-2xl shadow-xl overflow-hidden animate-fadeIn"
      role="dialog"
      aria-modal="true"
      aria-labelledby="modalTitle"
    >
      <button
        id="closeModal"
        class="absolute top-3 right-3 h-10 w-10 grid place-items-center rounded-full text-2xl text-gray-600 hover:text-gray-800 hover:bg-gray-100"
        aria-label="Close modal"
      >
        &times;
      </button>

      <div class="bg-black">
        <img id="modalImage" src="" alt="" class="w-full max-h-[60vh] sm:max-h-[70vh] object-contain" />
      </div>

      <div class="p-5 sm:p-6 max-h-[40vh] sm:max-h-[35vh] overflow-y-auto">
        <h3 id="modalTitle" class="text-base sm:text-lg font-semibold mb-2"></h3>
        <div id="modalContent" class="prose prose-sm max-w-none"></div>
      </div>
    </div>
  </div>

  <script type="application/json" id="carousel-data" set:html={JSON.stringify(images)} />

  <style is:global>
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(12px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .animate-fadeIn { animation: fadeIn 0.25s ease-out forwards; }
  </style>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      // Types
      type ImageData = { src: string; alt: string; detail: string };

      const dataScript = document.getElementById("carousel-data") as HTMLScriptElement | null;
      const images: ImageData[] = dataScript?.textContent
        ? (JSON.parse(dataScript.textContent) as ImageData[])
        : [];

      const modal = document.getElementById("modal") as HTMLDivElement | null;
      const overlay = document.getElementById("overlay") as HTMLButtonElement | null;
      const closeBtn = document.getElementById("closeModal") as HTMLButtonElement | null;

      const modalImg = document.getElementById("modalImage") as HTMLImageElement | null;
      const modalTitle = document.getElementById("modalTitle") as HTMLHeadingElement | null;
      const modalContent = document.getElementById("modalContent") as HTMLDivElement | null;

      let lastFocused: HTMLElement | null = null;

      const lockScroll = (on: boolean): void => {
        document.documentElement.style.overflow = on ? "hidden" : "";
        document.body.style.overflow = on ? "hidden" : "";
      };

      const hasHTML = (s: string | undefined): boolean =>
        !!s && /<[a-z][\s\S]*>/i.test(s);

      const openModal = (index: number): void => {
        if (!modal || !modalImg || !modalTitle || !modalContent) return;
        const item = images[index];
        if (!item) return;

        modalImg.src = item.src;
        modalImg.alt = item.alt || "";
        modalTitle.textContent = item.alt || `Image ${index + 1}`;
        if (hasHTML(item.detail)) {
          modalContent.innerHTML = item.detail;
        } else {
          modalContent.textContent = item.detail || "";
        }

        modal.classList.remove("hidden");
        modal.setAttribute("aria-hidden", "false");
        lockScroll(true);
        lastFocused = (document.activeElement as HTMLElement) || null;
        closeBtn?.focus();
      };

      const closeModal = (): void => {
        if (!modal) return;
        modal.classList.add("hidden");
        modal.setAttribute("aria-hidden", "true");
        lockScroll(false);
        lastFocused?.focus?.();
      };

      // Open handlers with typed NodeList
      document.querySelectorAll<HTMLButtonElement>("[data-index]").forEach((el) => {
        el.addEventListener("click", () => {
          const raw = el.getAttribute("data-index");
          const index = Number(raw ?? 0);
          openModal(index);
        });
      });

      overlay?.addEventListener("click", closeModal);
      closeBtn?.addEventListener("click", closeModal);

      window.addEventListener("keydown", (e: KeyboardEvent) => {
        if (!modal || modal.classList.contains("hidden")) return;
        if (e.key === "Escape") closeModal();
      });
    });
  </script>
</section>
